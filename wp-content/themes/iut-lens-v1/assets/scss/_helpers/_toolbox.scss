@each $bp_o in $bps {
    $bp_k: nth($bp_o, 1);
    $bp_v: nth($bp_o, 2);

    @media #{$bp_k}{
        // Margin - Padding
        $vertical-values: ( 0, 0.25, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, "auto" );

        @each $v in reverse($vertical-values){
            $gap: if(type-of($v) == 'number', $vr * $v, #{$v});

            // Margin
            @include selector('.mg-#{str-replace(inspect($v), '.', '_')}', $bp_v){ margin: $gap !important; }
            @include selector('.mgv-#{str-replace(inspect($v), '.', '_')}', $bp_v){
                margin-top: $gap !important;
                margin-bottom: $gap !important;
            }
            @include selector('.mgh-#{str-replace(inspect($v), '.', '_')}', $bp_v){
                margin-right: $gap !important;
                margin-left: $gap !important;
            }
            @include selector('.mgt-#{str-replace(inspect($v), '.', '_')}', $bp_v){ margin-top: $gap !important; }
            @include selector('.mgr-#{str-replace(inspect($v), '.', '_')}', $bp_v){ margin-right: $gap !important; }
            @include selector('.mgb-#{str-replace(inspect($v), '.', '_')}', $bp_v){ margin-bottom: $gap !important; }
            @include selector('.mgl-#{str-replace(inspect($v), '.', '_')}', $bp_v){ margin-left: $gap !important; }

            // Padding
            @if(type-of($v) == 'number'){
                @include selector('.pg-#{str-replace(inspect($v), '.', '_')}', $bp_v){ padding: $gap !important; }
                @include selector('.pgv-#{str-replace(inspect($v), '.', '_')}', $bp_v){
                    padding-top: $gap !important;
                    padding-bottom: $gap !important;
                }
                @include selector('.pgh-#{str-replace(inspect($v), '.', '_')}', $bp_v){
                    padding-right: $gap !important;
                    padding-left: $gap !important;
                }
                @include selector('.pgt-#{str-replace(inspect($v), '.', '_')}', $bp_v){ padding-top: $gap !important; }
                @include selector('.pgr-#{str-replace(inspect($v), '.', '_')}', $bp_v){ padding-right: $gap !important; }
                @include selector('.pgb-#{str-replace(inspect($v), '.', '_')}', $bp_v){ padding-bottom: $gap !important; }
                @include selector('.pgl-#{str-replace(inspect($v), '.', '_')}', $bp_v){ padding-left: $gap !important; }
            }
        }



        // Colors
        @each $color in $colors {
            $c_name: nth($color, 1);
            $c_hex: nth($color, 2);
    
            @include selector('.text-#{$c_name}', $bp_v){ color: $c_hex !important; }
            @include selector('.h-text-#{$c_name}', $bp_v){ &:hover{ color: $c_hex !important; } }
            @include selector('.bg-#{$c_name}', $bp_v){ background-color: $c_hex !important; }
            @include selector('.h-bg-#{$c_name}', $bp_v){ &:hover{ background-color: $c_hex !important; } }
        }



        // Borders
        @for $i from 0 through 3{
            @each $color in $colors {
                $c_name: nth($color, 1);
                $c_hex: nth($color, 2);
        
                @include selector('.bd-#{$i}-#{$c_name}', $bp_v){ border: ($i * 1px) solid $c_hex; }
                @include selector('.bdt-#{$i}-#{$c_name}', $bp_v){ border-top: ($i * 1px) solid $c_hex; }
                @include selector('.bdr-#{$i}-#{$c_name}', $bp_v){ border-right: ($i * 1px) solid $c_hex; }
                @include selector('.bdb-#{$i}-#{$c_name}', $bp_v){ border-bottom: ($i * 1px) solid $c_hex; }
                @include selector('.bdl-#{$i}-#{$c_name}', $bp_v){ border-left: ($i * 1px) solid $c_hex; }
                }
        }



        // Text alignments
        @include selector('.text-left', $bp_v){ text-align: left !important; }
        @include selector('.text-center', $bp_v){ text-align: center !important; }
        @include selector('.text-right', $bp_v){ text-align: right !important; }



        // Font sizes
        $font-sizes: (16, 18, 20);
        @each $fz in reverse($font-sizes){
            @include selector('.fz-#{str-replace(inspect($fz), '.', '_')}', $bp_v){ font-size: (($fz / 10) * 1rem) !important; }
        }

        // Font weights
        $font-weight: (300, 400, 500, 700);
        @each $fw in reverse($font-weight){
            @include selector('.fw-#{str-replace(inspect($fw), '.', '_')}', $bp_v){ font-weight: $fw !important; }
        }
    }
}